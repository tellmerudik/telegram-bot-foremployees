from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_url("–í–°–¢–ê–í–¨ –°–°–´–õ–ö–£ –ù–ê –ì–£–ì–õ –¢–ê–ë–õ–ò–¶–£").sheet1

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
questions = [
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email.",
    "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.",
    "–í–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å.",
    "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è."
]
departments = ["–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞", "IT", "–ü—Ä–æ–¥–∞–∂–∏", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä", "HR"]

# –≠—Ç–∞–ø 1: –°—Ç–∞—Ä—Ç
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Ç–∏–ê—Ä–±–∏—Ç—Ä! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –æ—Å–≤–æ–∏—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å"]], resize_keyboard=True)
    )

# –≠—Ç–∞–ø 2: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
async def collect_data(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    chat_id = update.message.chat_id

    if chat_id not in user_data:
        user_data[chat_id] = {"step": 0}

    step = user_data[chat_id]["step"]

    if step < len(questions):
        if step == 4:  # –í–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª–∞
            await update.message.reply_text(
                questions[step],
                reply_markup=ReplyKeyboardMarkup([[d] for d in departments], resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            if step > 0:
                user_data[chat_id][f"data_{step}"] = user_input
            await update.message.reply_text(questions[step])
        user_data[chat_id]["step"] += 1
    else:
        user_data[chat_id][f"data_{step}"] = user_input
        await confirm_data(update, context)

# –≠—Ç–∞–ø 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def confirm_data(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    collected_data = user_data[chat_id]

    confirmation_message = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
        f"–§–ò–û: {collected_data.get('data_1')}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {collected_data.get('data_2')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {collected_data.get('data_3')}\n"
        f"Email: {collected_data.get('data_4')}\n"
        f"–û—Ç–¥–µ–ª: {collected_data.get('data_5')}\n"
        f"–ì–æ—Ä–æ–¥: {collected_data.get('data_6')}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {collected_data.get('data_7')}\n"
        f"–§–∞–º–∏–ª–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {collected_data.get('data_8')}"
    )
    await update.message.reply_text(
        confirmation_message,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm"),
             InlineKeyboardButton("‚ùå –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ", callback_data="redo")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def handle_confirmation(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id

    if query.data == "confirm":
        collected_data = user_data[chat_id]
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        sheet.append_row([
            collected_data.get('data_1'), collected_data.get('data_2'),
            collected_data.get('data_3'), collected_data.get('data_4'),
            collected_data.get('data_5'), collected_data.get('data_6'),
            collected_data.get('data_7'), collected_data.get('data_8')
        ])
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!")
        await company_info(query, context)
    elif query.data == "redo":
        user_data[chat_id]["step"] = 0
        await query.message.reply_text("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")

# –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏
async def company_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ú—ã ‚Äî –°–∏—Ç–∏–ê—Ä–±–∏—Ç—Ä. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –∂–∏–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ —Å–≤–æ–±–æ–¥–Ω–æ.\n"
        "–ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü, –Ω–æ —Ç–∞–∫–∂–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º...",
        reply_markup=ReplyKeyboardMarkup([["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª —Ç–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é?"]], resize_keyboard=True)
    )

async def founder_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –°–∏–∑–æ–≤ –ë–æ—Ä–∏—Å –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á.\n"
        "'–ú–Ω–µ —Ö–æ—Ç–µ–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å –∫—É–ª—å—Ç—É—Ä–æ–π, –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã, —Ç–≤–æ—Ä—è—Ç, –∏ –ø—Ä–∏ —ç—Ç–æ–º –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç.\n"
        "–§–æ–∫—É—Å –Ω–∞ —Å–≤–æ–±–æ–¥–µ, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–∏.'",
        reply_markup=ReplyKeyboardMarkup([["–ó–¥–æ—Ä–æ–≤–æ! –ê –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–ª–∞—Å—å –∫–æ–º–ø–∞–Ω–∏—è?"]], resize_keyboard=True)
    )

async def history_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üìç –ó–∞ –≥–æ–¥ –¥–æ —Å—Ç–∞—Ä—Ç–∞ —É –Ω–∞—Å –ø–æ—è–≤–∏–ª–∞—Å—å –º–µ—á—Ç–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Å—Ç–Ω–æ –∏ –æ—Ç–∫—Ä—ã—Ç–æ.\n"
        "üìÖ 29 –∞–ø—Ä–µ–ª—è 2019 –≥–æ–¥–∞ –º—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–∞—á–∞–ª–∏ –Ω–∞—à –ø—É—Ç—å.\n"
        "üìÖ –í –º–∞—Ä—Ç–µ 2020 –≥–æ–¥–∞ –ø–∞–Ω–¥–µ–º–∏—è –∏–∑–º–µ–Ω–∏–ª–∞ –≤—Å—ë. –ú—ã –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Å–º–æ–≥–ª–∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É.\n"
        "üîÑ –õ–µ—Ç–æ–º 2020 –≥–æ–¥–∞ –æ–±–Ω–æ–≤–∏–ª–∏ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂, —á—Ç–æ —Å—Ç–∞–ª–æ —Ç–æ—á–∫–æ–π —Ä–æ—Å—Ç–∞.\n"
        "üéâ –í 2022 –≥–æ–¥—É –æ—Ç–º–µ—Ç–∏–ª–∏ 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–∫—Ä—ã–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å –≤ –ö–∏—Ä–æ–≤–µ.\n"
        "üìä –í 2024 –≥–æ–¥—É –æ—Ç–∫—Ä—ã–ª–∏ –±—ç–∫-–æ—Ñ–∏—Å –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ –∏ –¥–≤–∞ –Ω–æ–≤—ã—Ö –æ—Ñ–∏—Å–∞ –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö.",
        reply_markup=ReplyKeyboardMarkup([["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –≤ –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –æ—Ç–∫—Ä—ã—Ç—ã –æ—Ñ–∏—Å—ã?"]], resize_keyboard=True)
    )

async def geography_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ù–∞—à–∏ –æ—Ñ–∏—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤:\n"
        "- –ö–∏—Ä–æ–≤\n"
        "- –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫\n"
        "- –°–∞–º–∞—Ä–∞\n"
        "- –ü–µ—Ä–º—å\n"
        "- –ß–µ–ª—è–±–∏–Ω—Å–∫ (–±—ç–∫-–æ—Ñ–∏—Å)\n"
        "- –ú–æ—Å–∫–≤–∞",
        reply_markup=ReplyKeyboardMarkup([["–í–ø–µ—á–∞—Ç–ª—è–µ—Ç! –ê –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏?"]], resize_keyboard=True)
    )

async def structure_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É. "
        "–¢–∞–∫–∂–µ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø–ª–æ—â–∞—é—Ç –∑–∞–¥–∞—á–∏ –≤ –∂–∏–∑–Ω—å.\n\n"
        "–í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([["–ï—Å—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ, —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏?"]], resize_keyboard=True)
    )

# –≠—Ç–∞–ø 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
async def final_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–î–∞, —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –≥–¥–µ —Å–æ–±—Ä–∞–Ω–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å. –¢–∞–º —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "- –ë–æ–Ω—É—Å—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "- –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "- –î–∞—Ç—ã –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã.",
        reply_markup=ReplyKeyboardMarkup([["–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è!"]], resize_keyboard=True)
    )

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã

# –í–æ–ø—Ä–æ—Å 1
async def question_one(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ó–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –≤—Å—ë –ø–æ–Ω—è–ª, –∏ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ.\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Å–Ω–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é?"
    )

async def handle_question_one(update: Update, context: CallbackContext) -> None:
    if update.message.text.strip() == "2019":
        await update.message.reply_text("–í–µ—Ä–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
        await question_two(update, context)
    else:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Å–Ω–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é?")

# –í–æ–ø—Ä–æ—Å 2
async def question_two(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å 2: –ö–æ–≥–¥–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç –ó–ü?\n"
        "–í–≤–µ–¥–∏ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 10)."
    )

async def handle_question_two(update: Update, context: CallbackContext) -> None:
    correct_answers = ["25 10", "10 25"]
    if update.message.text.strip() in correct_answers:
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª!")
        await finish_training(update, context)
    else:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ö–æ–≥–¥–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç –ó–ü?")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
async def finish_training(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª(–∞) –æ–±—É—á–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤(–∞) –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ! "
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –±–æ—Ç –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –£–¥–∞—á–∏!"
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    application = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data))
    application.add_handler(CallbackQueryHandler(handle_confirmation, pattern="confirm|redo"))

    # –û–±—É—á–µ–Ω–∏–µ
    application.add_handler(MessageHandler(filters.Regex("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"), founder_info))
    application.add_handler(MessageHandler(filters.Regex("–ó–¥–æ—Ä–æ–≤–æ!"), history_info))
    application.add_handler(MessageHandler(filters.Regex("–í–ø–µ—á–∞—Ç–ª—è–µ—Ç!"), structure_info))
    application.add_handler(MessageHandler(filters.Regex("–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è!"), final_info))

    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    application.add_handler(MessageHandler(filters.Regex("^–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Å–Ω–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é\\?$"), question_one))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_one))
    application.add_handler(MessageHandler(filters.Regex("^–ö–æ–≥–¥–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç –ó–ü\\?$"), question_two))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_two))

    application.run_polling()


# –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –≤—ã—à–µ

